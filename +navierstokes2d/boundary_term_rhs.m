function values = boundary_term_rhs(points, mesh, u_x, u_y, pressure, ed, basis, i, k)

  associated_element = mesh.boundary_edges(ed, 4);
  element_edge_number = find(mesh.elements(associated_element, :) == setdiff(mesh.elements(associated_element, :), mesh.boundary_edges(ed, [1,2])));

  jac = sqrt(sum((mesh.nodes(mesh.boundary_edges(ed, 1:2), :) - mesh.nodes(mesh.boundary_edges(ed, 1:2), :)).^2));
  if element_edge_number == 1
    path_parametrization = @(s) [s, 1 - s];
  elseif element_edge_number == 2
    path_parametrization = @(s) [0, s];
  else
    path_parametrization = @(s) [s, 0];
  end

  n_points = size(points, 1);

  kronecker = eye(2);

  for d = 1:n_points
      values(d) = values(d) + jac ...
			      * mesh.normals_nodes(,) ...
			      * mesh.normals_nodes(,) ...
			      * mesh.normals_nodes(,) ...
			      * kronecker(,) * pressure() ...
			      * u{}() ...
			      * basis.phi{}(path_parametrization(d)) ...
			      * basis.phi{}(path_parametrization(d)) ...
			      * basis.phi{}(path_parametrization(d)) ...
			      * basis.phi{}(path_parametrization(d)) ...
			      * mesh.jmt() ...
      			      * basis.dphi{}(path_parametrization(d));

      values(d) = values(d) + jac * beta ...
			      * mesh.tangents_nodes(,) ...
			      * mesh.tangents_nodes(,) ...
			      * u{}() ...
			      * basis.phi{}(path_parametrization(d)) ...
			      * basis.phi{}(path_parametrization(d)) ...
			      * basis.phi{}(path_parametrization(d));
  end
	 
